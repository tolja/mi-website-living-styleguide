{
    "title":"Betriebssysteme und verteilte Systeme",
	"modulverantwortlich": "mb, lk",
	"modulniveau": "<no value>",
	"kuerzel": "BS1",
	"studiensemester": "4",
	"sprache": "deutsch",
	"kreditpunkte": "5",
	"voraussetzungen-nach-pruefungsordnung": "<no value>",
	"empfohlene-voraussetzungen": "<no value>",
	"published": "<no value>",
	"type": "pm",
    "content": ""## Kurzbeschreibung\nSystemprogrammierung am Beispiel von UNIX.\n\n## Lehrform/SWS\n4 SWS: Vorlesung 2 SWS; Praktikum 2 SWS\n\n## Arbeitsaufwand\nGesamtaufwand 150h, davon \n\n- 36h Vorlesung \n- 36h Praktikum\n- 78h Selbststudium \n\n## Angestrebte Lernergebnisse\n\nDie Studierenden können den Aufbau von Betriebssystemen am Beispiel UNIX erläutern, indem sie\n- die Ziele der Entwicklung von UNIX nennen und beschreiben,\n- die Hauptaufgaben von Betriebssystemen nennen und beschreiben,\n- den Aufbau von Betriebssystemen darstellen und erklären,\n\num die verschiedenen Bestandteile und Konzepte von Betriebssystemen nutzen zu können.\n\nDie Studierenden können eigene C-Programme für verteilte Systeme erstellen, indem sie\n- einen Computer über die Shell bedienen und dort eigene Programme ausführbar machen,\n- Daten mittels Systemschnittstellen in Dateien speichern, daraus lesen und diese verwalten,\n- Sockets für Client- und Serverprogramme nutzen und Daten darüber senden und empfangen,\n- Prozesse für nebenläufige Programmabläufe erzeugen,\n- Kommunikation zwischen Prozessen mit Shared Memory, Pipes und Message Queues realisieren,\n- Race Conditions erkennen, kritische Abschnitte festlegen und Prozesse synchronisieren,\n- die Lösungen klassischer Synchronisationsprobleme kennen und nutzen,\n\num später hardware- oder systemnahe Software für verteilte Systeme zu entwickeln oder zu bewerten, bspw. im Bereich »Internet of Things«\n\nDie Studierenden können theoretische Grundlagen von Betriebssystemen erörtern, indem sie\n- Programme und Prozesse unterscheiden und letztere mit ihren Zuständen modellieren,\n- verschiedene Strategien für das Scheduling von Prozessen anwenden und bewerten,\n- die Organisation des Speichers auf einem Datenträger erklären und darstellen,\n- die Abbildung von Prozessen im Arbeitsspeicher erklären und verschiedene Ansätze zur Verwaltung erläutern,\n\num später Auswirkungen von Betriebssystemvorgängen auf eigene Programme zu erkennen und darauf zu reagieren.\n\n## Inhalt\n\nSystemprogrammierung am Beispiel von UNIX: \n- Shell-Programmierung\n- Prozess-Modelle\n- Prozess-Erzeugung und Synchronisation\n- UNIX-Prozesse und elementare Synchronisation\n- Pipes\n- Shared Memory\n- Synchronisationsprimitive für den wechselseitigen Ausschluss\n- Semaphoren\n- Nachrichtenwarteschlangen\n- Dateisysteme\n- TCP/IP\n- Sockets\n- Remote Procedure Call\n- Strategien zum Scheduling und zur Speicherverwaltung\n- Klassische Synchronisationsprobleme\n\n## Studien-/Prüfungsleistungen\nSchriftliche Prüfung, sowie erfolgreiche Teilnahme am Praktikum als Prüfungsvorleistung.\n\n## Medienformen\nFoliensammlung, ausformuliertes Skript, Beispiellösungen\n\n## Literatur\n+ Tanenbaum, A. S.: „Moderne Betriebssysteme“\n+ Brown, C.: „Programmieren verteilter UNIX-Anwendungen“\n+ Kernighan, B. W., Pike, R.: „Der UNIX-Werkzeugkasten“\n+ Ehses, E., Köhler, L., Stenzel, H., Victor, F. „Betriebssysteme: Ein Lehrbuch mit Übungen zur Systemprogrammierung in UNIX/Linux“\n\n"",
}
